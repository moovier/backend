import pandas as pdimport tensorflow as tffrom keras import layers, lossesimport kerasimport optunafrom .model import train_recommender, metricsdef optuna_study(    ratings: pd.DataFrame,    patience: int,    num_trials: int,    validation_split: float,) -> keras.Model:    trial = lambda t: optuna_model_trial(        x=[ratings.user.values, ratings.movie.values],        y=ratings.rating.values,        patience=patience,        num_users=ratings.user.nunique(),        num_movies=ratings.movie.nunique(),        trial=t,        validation_split=validation_split,    )    study = optuna.create_study(direction="minimize")    study.optimize(func=trial, n_trials=num_trials)    return optuna_model_fit(        x=[ratings.user.values, ratings.movie.values],        y=ratings.rating.values,        patience=patience,        num_users=ratings.user.nunique(),        num_movies=ratings.movie.nunique(),        embedding_size_mlp=study.best_trial.params["embedding_size_mlp"],        embedding_size_mf=study.best_trial.params["embedding_size_mf"],        dense_units=study.best_trial.params["dense_units"],        learning_rate=study.best_trial.params["learning_rate"],        validation_split=validation_split,    )def optuna_model_trial(    x: list[pd.Series],    y: pd.Series,    patience: int,    num_users: int,    num_movies: int,    trial: int,    validation_split: float) -> float:    embedding_size_mlp = trial.suggest_int("embedding_size_mlp", 1, 100)    embedding_size_mf = trial.suggest_int("embedding_size_mf", 1, 100)    dense_units = trial.suggest_int("dense_units", 1, 50)    learning_rate = trial.suggest_float("learning_rate", 1e-5, 1e-1)    model = optuna_model_fit(        x=x,        y=y,        patience=patience,        num_users=num_users,        num_movies=num_movies,        embedding_size_mlp=embedding_size_mlp,        embedding_size_mf=embedding_size_mf,        learning_rate=learning_rate,        dense_units=dense_units,        validation_split=validation_split,    )    return model.evaluate(x, y, verbose=0, return_dict=True).get("loss")def optuna_model_fit(    x: list[pd.Series],    y: pd.Series,    patience: int,    num_users: int,    num_movies: int,    embedding_size_mlp: int,    embedding_size_mf: int,    learning_rate: float,    dense_units: int,    validation_split: float,) -> keras.Model:    user_input = layers.Input(shape=(1,), name="user_input", dtype=tf.int32)    movie_input = layers.Input(shape=(1,), name="movie_input", dtype=tf.int32)    movie_embedding_mlp = layers.Embedding(num_movies, embedding_size_mlp, name="movie_embedding_mlp")(movie_input)    movie_vec_mlp = layers.Flatten(name="flatten_movie_mlp")(movie_embedding_mlp)    user_embedding_mlp = layers.Embedding(num_users, embedding_size_mlp, name="user_embedding_mlp")(user_input)    user_vec_mlp = layers.Flatten(name="flatten_user_mlp")(user_embedding_mlp)    movie_embedding_mf = layers.Embedding(num_movies, embedding_size_mf, name="movie_embedding_mf")(movie_input)    movie_vec_mf = layers.Flatten(name="flatten_movie_mf")(movie_embedding_mf)    user_embedding_mf = layers.Embedding(num_users, embedding_size_mf, name="user_embedding_mf")(user_input)    user_vec_mf = layers.Flatten(name="flatten_user_mf")(user_embedding_mf)    concat = layers.Concatenate()([movie_vec_mlp, user_vec_mlp])    pred_mlp = layers.Dense(units=dense_units, name="pred_mlp", activation="relu")(concat)    pred_mf = layers.Dot(axes=-1, name="pred_mf")([movie_vec_mf, user_vec_mf])    combine_mlp_mf = layers.Concatenate()([pred_mf, pred_mlp])    result = layers.Dense(1, name="result", activation="relu")(combine_mlp_mf)    model = keras.Model(inputs=[user_input, movie_input], outputs=result, name="recommender-net")    model.compile(        loss=losses.MeanAbsoluteError(),        metrics=metrics,        optimizer=keras.optimizers.Adam(learning_rate=learning_rate),    )    return train_recommender(        x=x,        y=y,        model=model,        patience=patience,        validation_split=validation_split,        id=f"optuna_mlp_{embedding_size_mlp}_mf_{embedding_size_mf}_dense_{dense_units}_lr_{learning_rate}"    )